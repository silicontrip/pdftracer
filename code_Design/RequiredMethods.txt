// no c++ in the header


std::string fn = pdf.getFilename();
std::string vr = pdf.getPDFVersion();
pageArray = pdf.getAllPages();
objTable= qpDocument.getAllObjects();
QPDFObjectHandle rootCatalog = pdf.getRoot();
qDocument.emptyPDF();
qDocument.processFile([fn UTF8String]);
QPDFWriter qpdfWriter(qDocument);
qpdfWriter.setOutputMemory();
qpdfWriter.write();
qDocument.processMemoryFile([fn UTF8String], (char*)[content bytes], [content length]);  // initialise QPDF from memory
qDocument.getFilename

-----

QPDFObjectHandle pdfitem
QPDFObjectHandle p1 = pageArray[0];
if (pdfitem.isArray())
pdfitem.isDictionary()
NSInteger count = pdfitem.getKeys().size();
QPDFObjectHandle type = pdfitem.getKey("/Type");
std::string typeName = type.getName();
pdfitem.getTypeName()
QPDFObjectHandle pdfitem = objTable[index];
QPDFNode* sindex =[QPDFNode nodeWithParent:item Named:lindex Handle:pdfitem];
QPDFObjectHandle pdfitem = [(QPDFNode*)item object];
return (pdfitem.isArray() || pdfitem.isDictionary());
rs = [NSString stringWithFormat:@"%s",pdfitem.getTypeName()];
rs= [NSString stringWithFormat:@"%s",pdfitem.unparse().c_str()];
QPDFObjectHandle pdfitem =  QPDFObjectHandle(pageArray[index]);
QPDFObjectHandle thisObject =  QPDFObjectHandle(pdfitem.getKey(*iterKey));
NSString* sKey = [NSString stringWithUTF8String:iterKey->c_str()];
QPDFObjectHandle thisObject = pdfitem.getArrayItem((int)index);
	std::string *qpdfValue = new std::string([newValue UTF8String]);
parent.removeKey([name UTF8String]);
parent.replaceKey(*qpdfValue, [node object]);
parent.setArrayItem(index, newobj);
QPDFObjectHandle newobj = QPDFObjectHandle::parse(*qpdfValue);
parent.replaceKey(key, newobj);
static + (Boolean)hasNoIndirect:(QPDFObjectHandle)qpdfVal; // c++ type
+ (Boolean)hasNoIndirect:(QPDFObjectHandle)qpdfVal
qpdf.getArrayNItems()
Handle:QPDFObjectHandle::newNull()
if (qpdf.isStream()) {
objText = [NSString stringWithUTF8String:qpdf.unparseResolved().c_str()];
if (qpdf.isNull())
qpdf.replaceStreamData(replacement,QPDFObjectHandle::newNull(),QPDFObjectHandle::newNull());




